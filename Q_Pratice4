import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors
import random

# 환경 설정
class GridWorld:
    def __init__(self, size=5):
        self.size = size
        self.state = (0, 0)  # 시작 상태

    def reset(self):
        self.state = (0, 0)
        return self.state

    def step(self, action):
        x, y = self.state
        if action == 0:    # 상
            x = max(0, x - 1)
        elif action == 1:  # 하
            x = min(self.size - 1, x + 1)
        elif action == 2:  # 좌
            y = max(0, y - 1)
        elif action == 3:  # 우
            y = min(self.size - 1, y + 1)
        self.state = (x, y)
        return self.state

# Q-Learning
def q_learning(env, episodes, alpha, gamma, epsilon, max_steps_per_episode):
    q_table = np.zeros((env.size, env.size, 4))  # 4개의 행동에 대한 Q 값
    for _ in range(episodes):
        state = env.reset()
        for step in range(max_steps_per_episode):
            if random.uniform(0, 1) < epsilon:
                action = random.randint(0, 3)  # 무작위 행동 (탐험)
            else:
                action = np.argmax(q_table[state])  # 최적의 행동 (활용)

            next_state = env.step(action)
            reward = -1  # 모든 이동에 대해 일정한 보상
            old_value = q_table[state + (action,)]
            next_max = np.max(q_table[next_state])

            # Q-테이블 업데이트
            q_table[state + (action,)] = old_value + alpha * (reward + gamma * next_max - old_value)
            state = next_state
    return q_table

# 시각화 함수
def plot_grid_world(q_table):
    grid = np.zeros((5, 5))
    for i in range(5):
        for j in range(5):
            grid[i, j] = np.argmax(q_table[(i, j)])

    cmap = colors.ListedColormap(['white', 'red', 'green', 'blue', 'yellow'])
    plt.imshow(grid, cmap=cmap)
    plt.colorbar()
    plt.show()

# 파라미터
env = GridWorld()
episodes = 1000
alpha = 0.1
gamma = 0.6
epsilon = 0.1
max_steps_per_episode = 100

# 학습 및 시각화
q_table = q_learning(env, episodes, alpha, gamma, epsilon, max_steps_per_episode)
plot_grid_world(q_table)
